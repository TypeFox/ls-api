/*******************************************************************************
 * Copyright (c) 2016 TypeFox GmbH (http://www.typefox.io) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/

//------------------------------------------------------
// Create additional sources and Javadoc artifacts

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar, javadocJar
}

//------------------------------------------------------
// Sign the artifacts if the signing info is complete

apply plugin: 'signing'

signing {
	required { gradle.taskGraph.hasTask(uploadArchives) }
	sign configurations.archives
}
if (!project.hasProperty('signing.secretKeyRingFile') || !project.property('signing.secretKeyRingFile')
		|| !project.hasProperty('signing.keyId') || !project.property('signing.keyId')
		|| !project.hasProperty('signing.password') || !project.property('signing.password')) {
	signArchives.enabled = false
}

//------------------------------------------------------
// Configuration function for generated POMs

apply plugin: 'maven'

def configurePom = { pom ->
	pom.project {
		packaging 'jar'
		url 'https://github.com/TypeFox/ls-api'
		name = project.name
		description = project.name + " - is part of LsApi project"
		licenses {
			license {
				name 'Eclipse Public License, Version 1.0'
				url 'http://www.eclipse.org/legal/epl-v10.html'
			}
		}
		developers {
			developer {
				name 'Sven Efftinge'
				email 'sven.efftinge@typefox.io'
				organization 'TypeFox'
				organizationUrl 'http://typefox.io'
			}
			developer {
				name 'Dennis Hübner'
				email 'dennis.huebner@typefox.io'
				organization 'TypeFox'
				organizationUrl 'http://typefox.io'
			}
			developer {
				name 'Anton Kosyakov'
				email 'anton.kosyakov@typefox.io'
				organization 'TypeFox'
				organizationUrl 'http://typefox.io'
			}
			developer {
				name 'Miro Spönemann'
				email 'miro.spoenemann@typefox.io'
				organization 'TypeFox'
				organizationUrl 'http://typefox.io'
			}
		}
		scm {
			connection 'scm:git:git@github.com:TypeFox/ls-api.git'
			developerConnection 'scm:git:git@github.com:TypeFox/ls-api.git'
			url 'git@github.com:TypeFox/ls-api.git'
		}
	}
}

//------------------------------------------------------
// Task for copying to a local Maven repository

task createLocalMavenRepo(type: Upload) {
	group = 'Repository'
	description = 'Create or update the local Maven repository'
	dependsOn ":cleanLocalMavenRepo"
	configuration = configurations.archives
	repositories.mavenDeployer {
		repository(url: "file:" + file("../build/maven-repository"))
		configurePom(pom)
	}
}

//------------------------------------------------------
// Task for uploading to a remote Maven repository

uploadArchives.repositories.mavenDeployer {
	beforeDeployment { deployment -> signing.signPom(deployment) }
	repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
		if (project.hasProperty('sonatypeUserName') && project.hasProperty('sonatypePassword')) {
			authentication(userName: sonatypeUserName, password: sonatypePassword)
		}
	}
	snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
		if (project.hasProperty('sonatypeUserName') && project.hasProperty('sonatypePassword')) {
			authentication(userName: sonatypeUserName, password: sonatypePassword)
		}
	}
	configurePom(pom)
}
